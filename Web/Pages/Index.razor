@page "/"
@using Azure.AI.OpenAI;
@using Azure;
@inject OpenAIClient client;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<table>
    <tbody>
        @foreach (var item in ChatMessage)
        {
            <tr>
                <td>@item.Role:</td>
                <td>@item.Content</td>
            </tr>
        }
        @if (ChatMessageStreaming.Any())
        {
            <tr>
                <td>@ChatMessageStreaming.First().Role</td>
                <td>
                    @foreach (var item in ChatMessageStreaming)
                    {
                        @item.Content
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<SurveyPrompt Title="How is Blazor working for you?" />
@code {


    private List<ChatMessage> ChatMessage = new List<ChatMessage>();
    private List<ChatMessage> ChatMessageStreaming = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        ChatMessage = new List<ChatMessage>(){
new ChatMessage(ChatRole.System, "你是一个翻译机器."),
new ChatMessage(ChatRole.User, "翻译成英文: 天大地大我最大 "),
};
  GetChatCompletions().ConfigureAwait(false);
    }
    private async Task GetChatCompletions()
    {
        var chatCompletionsOptions = new ChatCompletionsOptions();
        ChatMessage.ForEach(chatCompletionsOptions.Messages.Add);

        Response<StreamingChatCompletions> response = await client.GetChatCompletionsStreamingAsync(deploymentOrModelName:
        "gpt-3.5-turbo", chatCompletionsOptions);
        using StreamingChatCompletions streamingChatCompletions = response.Value;

        await foreach (StreamingChatChoice choice in streamingChatCompletions.GetChoicesStreaming())
        {
            await foreach (ChatMessage message in choice.GetMessageStreaming())
            {
                Console.Write(message.Content);
                await Task.Delay(100);
                ChatMessageStreaming.Add(message);
                StateHasChanged();
            }
            Console.WriteLine();
        }
        @* foreach (var item in ChatMessageStreaming.GroupBy(m => m.Role))
{
ChatMessage.Add(new ChatMessage(item.Key, string.Join(' ', item.Select(m => m.Content))));
}
ChatMessageStreaming.Clear(); *@
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        @* Console.WriteLine("rerendered"); *@
        return base.OnAfterRenderAsync(firstRender);
    }
}
