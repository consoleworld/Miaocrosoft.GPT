@page "/"
@using Azure.AI.OpenAI;
@using Azure;
@inject OpenAIClient client;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<table>
    <tbody>
        @if (ChatMessage != null)
        {
            @foreach (var item in ChatMessage)
            {
                <tr>
                    <td>@item.Role:</td>
                    <td>@item.Content</td>
                </tr>
            }
        }
    </tbody>
</table>

<SurveyPrompt Title="How is Blazor working for you?" />
@code {


    private ChatMessage[]? ChatMessage;

    protected override async Task OnInitializedAsync()
    {
        ChatMessage = await GetChatCompletions();
    }
    private async Task<ChatMessage[]> GetChatCompletions()
    {
        var chatCompletionsOptions = new ChatCompletionsOptions()
            {
                Messages ={
new ChatMessage(ChatRole.System, "You are a helpful assistant. You will talk like a pirate."),
new ChatMessage(ChatRole.User, "Can you help me?"),
new ChatMessage(ChatRole.Assistant, "Arrrr! Of course, me hearty! What can I do for ye?"),
new ChatMessage(ChatRole.User, "What's the best way to train a parrot?"),
}
            };

        Response<StreamingChatCompletions> response = await client.GetChatCompletionsStreamingAsync(deploymentOrModelName:
        "gpt-3.5-turbo", chatCompletionsOptions);
        using StreamingChatCompletions streamingChatCompletions = response.Value;

        List<ChatMessage> messages = new List<ChatMessage>();
        await foreach (StreamingChatChoice choice in streamingChatCompletions.GetChoicesStreaming())
        {
            await foreach (ChatMessage message in choice.GetMessageStreaming())
            {
                messages.Add(message);
                Console.Write(message.Content);
            }
            Console.WriteLine();
        }
        return messages.ToArray();
    }
}