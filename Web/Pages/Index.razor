@page "/"
@using Azure.AI.OpenAI;
@using Azure;
@inject OpenAIClient client;

<PageTitle>Index</PageTitle>

<h1>Hello my private ChatGPT</h1>

<table>
    <tbody>
        @foreach (var item in ChatMessage)
        {
            <tr>
                <td>@item.Role:</td>
                <td>@item.Content</td>
            </tr>
        }
        @if (ChatMessageStreaming.Any())
        {
            <tr>
                <td>@ChatMessageStreaming.First().Role</td>
                <td>
                    @foreach (var item in ChatMessageStreaming)
                    {
                        @item.Content
                    }
                </td>
            </tr>
        }
        @if (Loading)
        {
            <tr>
                <td colspan="2">Loading...</td>
            </tr>
        }
    </tbody>
</table>
<form class="input-group input-group-lg navbar-fixed-bottom" @onsubmit="Submit">
    <input type="text" class="form-control" aria-label="Sizing example input" placeholder="Here to chat with GPT"
        aria-describedby="inputGroup-sizing-lg" @bind="ChatMessageInput">
</form>
@code {


    private List<ChatMessage> ChatMessage = new List<ChatMessage>();
    private List<ChatMessage> ChatMessageStreaming = new List<ChatMessage>();
    private bool Loading = false;
    public string ChatMessageInput { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ChatMessage = new List<ChatMessage>()
        {
            @* new ChatMessage(ChatRole.System, "你是一个翻译机器."),
new ChatMessage(ChatRole.User, "翻译成英文: 天大地大我最大 "), *@
        };
        GetChatCompletions().ConfigureAwait(false).GetAwaiter();
    }
    private async Task GetChatCompletions()
    {
        var chatCompletionsOptions = new ChatCompletionsOptions();
        ChatMessage.ForEach(chatCompletionsOptions.Messages.Add);
        Response<StreamingChatCompletions> response;
        try
        {
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
            Loading = true;
            response = await client.GetChatCompletionsStreamingAsync(deploymentOrModelName:
            "gpt-3.5-turbo", chatCompletionsOptions);
            using StreamingChatCompletions streamingChatCompletions = response.Value;
            await foreach (StreamingChatChoice choice in streamingChatCompletions.GetChoicesStreaming())
            {
                await foreach (ChatMessage message in choice.GetMessageStreaming())
                {
                    Console.Write(message.Content);
                    await Task.Delay(1);
                    ChatMessageStreaming.Add(message);
                    StateHasChanged();
                }
                Console.WriteLine();
            }
            foreach (var item in ChatMessageStreaming.GroupBy(m => m.Role))
            {
                ChatMessage.Add(new ChatMessage(item.Key, string.Join(' ', item.Select(m => m.Content))));
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            ChatMessageStreaming.Clear();
            Loading = false;
        }

    }

    public async Task Submit()
    {
        if (string.IsNullOrEmpty(ChatMessageInput))
        {
            return;
        }
        ChatMessage.Add(new ChatMessage(ChatRole.User, ChatMessageInput));
        ChatMessageInput = string.Empty;
        await GetChatCompletions();
    }
}
