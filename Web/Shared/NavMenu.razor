@using Azure.AI.OpenAI
@inject IJSRuntime JS
@inject Miaocrosoft.GPT.Data.ChatHistoryStorage chatHistoryStorage;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand collapse" href="">Miaocrosoft.GPT</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <a class="nav-link navbar-brand navbar-toggler" href="#" @onclick="InstallApp">添加到桌面</a>
        @* <button type="button" @onclick="InstallApp" class="btn btn-light navbar-toggler">添加到桌面</button> *@
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (chatMessages != null)
        {
            @foreach (var item in chatMessages)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" @onclick="()=>SetCurrent(item)">
                        <span class="oi oi-home" aria-hidden="true"></span> @item?.FirstOrDefault()?.Content
                    </NavLink>
                </div>
            }
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="AddNew">
                <span class="oi oi-home" aria-hidden="true"></span> Add new chat
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool? ReadyToInstall = null;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    List<List<ChatMessage>> chatMessages = null;


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task SetCurrent(List<ChatMessage> item)
    {
        await chatHistoryStorage.SetCurrent(item);
        StateHasChanged();
    }

    private async Task AddNew()
    {
        await chatHistoryStorage.AddNew();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!ReadyToInstall.HasValue)
            {
                ReadyToInstall = await JS.InvokeAsync<bool>("installer.installedOrUnsupported");
            }
            await chatHistoryStorage.LoadHistory();
            chatMessages = await chatHistoryStorage.GetAll();
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }

    public async Task InstallApp()
    {
        await JS.InvokeVoidAsync("installer.installPrompt");
    }
}
